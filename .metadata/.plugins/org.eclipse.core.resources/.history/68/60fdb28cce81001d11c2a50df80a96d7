/*
 * Modbus_Circutor_CVM_1D_Registers.c
 *
 *  Created on: 25 okt. 2022
 *      Author: bart
 */

#include <ctype.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <math.h>
#include "Serial.h"
#include "Modbus.h"
#include "Modbus_Circutor_CVM_1D_Registers.h"


#define	VOLTAGE 		0
#define CURRENT			3
#define ACTIVEPOWER		6



float ConvertToRegisterUnits(int data, int type)
{
	float ConvertedData;
	if (type == VOLTAGE)
	{
		ConvertedData = (float) data;
		ConvertedData = (ConvertedData/10);
	}

	if (type == CURRENT || type == ACTIVEPOWER)
	{
		ConvertedData = (float) data;
		ConvertedData = (ConvertedData/100);
	}

	return ConvertedData;
}

void Readmodbus_CircutorData_MqttTopicPayload(int type, int fd, struct mqtt *data)
{

    int ReceivedData;
    float ConvertedData;
    unsigned char TopicPartTwo[50];


    ReceivedData = ReadAddress(fd, Circutor_CVM_1D_Address, Registers_Circutor_CVM_1D[type], 1);
    data->Payload = ConvertToRegisterUnits(ReceivedData, type);
    strcpy(TopicPartTwo, RegisterNames_Circutor_CVM_1D[type]);
//    unsigned char combineTopics(struct mqtt *data, unsigned char array2)
/*
    for (i = 0; i < 100; i++)
    {
    	strcpy(data->Topic[i], topic[i]);
    }
*/

}

unsigned char combineTopics(struct mqtt *data, unsigned char array2)
{
  // Allocate a new array to hold both arrays
	int size = data->;
	unsigned char CombinedArray[size];

    // Copy the elements of array1 and array2 to combined
    int i;
    for (i = 0; i < size1; i++) {
        strcpy(CombinedArray[i], array1[i]);
    }
    for (i = 0; i < size2; i++) {
        strcpy(CombinedArray[size1 + i], array2[i]);
    }

    return CombinedArray;

}

